trigger:
  - main

variables:
  tf_version: "0.15.0"
  tf_state_resource_group: "rg-tfstate"
  tf_enviornment: "dev"
  tf_statelocation: "southeastasia"
  tf_state_storage_account: "statetfstorage3201"
  tf_state_sku: "Standard_LRS"
  tf_container_name: "tfstate"
  service_connection_name: "MSDN Platform"

pool:
  vmImage: "ubuntu-latest"

stages:
  # Run Checkov, upload results and optionally halt if there any problems found
  ######################################################################

  - stage: "runCheckov"
    displayName: "Checkov - Scan Terraform files"
    jobs:
      - job: "runCheckov"
        displayName: "Checkov > Pull, run and publish results of Checkov scan"
        steps:
          - bash: |
              docker pull bridgecrew/checkov
            workingDirectory: $(System.DefaultWorkingDirectory)
            displayName: "Pull > bridgecrew/checkov"
          - bash: |
              docker run --volume $(pwd):/tf bridgecrew/checkov --directory /tf --output junitxml --soft-fail > $(pwd)/CheckovReport.xml
            workingDirectory: $(System.DefaultWorkingDirectory)
            displayName: "Run > checkov"
          - task: PublishTestResults@2
            inputs:
              testRunTitle: "Checkov Results"
              failTaskOnFailedTests: true
              testResultsFormat: "JUnit"
              testResultsFiles: "CheckovReport.xml"
              searchFolder: "$(System.DefaultWorkingDirectory)"
            displayName: "Publish > Checkov scan results"

  - stage: "validateTerraform"
    displayName: "Terraform - Validate"
    dependsOn:
      - "runCheckov"
    jobs:
      - job: "TerraformJobs"
        displayName: "Terraform > install, init and validate"
        continueOnError: false
        steps:
          - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
            inputs:
              terraformVersion: "$(tf_version)"
            displayName: "Install > terraform"

          - task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-cli.TerraformCLI@0
            inputs:
              command: "init"
              backendType: "azurerm"
              backendServiceArm: "$(service_connection_name)"
              ensureBackend: true
              backendAzureRmResourceGroupName: "$(tf_enviornment)-$(tf_state_resource_group)"
              backendAzureRmResourceGroupLocation: "$(tf_statelocation)"
              backendAzureRmStorageAccountName: "$(tf_state_storage_account)"
              backendAzureRmStorageAccountSku: "$(tf_state_sku)"
              backendAzureRmContainerName: $(tf_container_name)
              backendAzureRmKey: "$(tf_environment).terraform.tstate"
            displayName: "Run > terraform init"

          - task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-cli.TerraformCLI@0
            inputs:
              command: "validate"
              environmentServiceName: "$(service_connection_name)"
            displayName: "Run > terraform validate" 